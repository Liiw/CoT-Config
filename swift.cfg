# Configuration file

boundrymode {
    # Must be in the same order as FPS values. [default: [], [], []]
    S:commandsAtLowerFPSValues <
        
        
        
     >

    # Must be in the same order as FPS values. [default: [], [], []]
    S:commandsAtUpperFPSValues <
        
        
        
     >

    # Values at which to run commands/give warnings. If the string is empty it will be safely ignored.
    I:lowerFPSValues <
        30
        60
        25
     >

    # Values at which to run commands/give warnings. If the string is empty it will be safely ignored.
    I:upperFPSValues <
        40
        100
        120
     >

    # Whether or not to ignore the client's refresh rate when running a corresponding upperFPSValue. Set to true to ignore, that is, force the execution of any commands and warnings associated with the corresponding upperFPSValue, regardless of the client's refresh rate.
    B:upperFPSValuesOverrides <
        false
        false
        false
     >

    # Must be in the same order as FPS values. [default: [Under 30.], [Under 60.], [Under 25.]]
    S:warningsAtLowerFPSValues <
        Under 30.
        Under 60.
        Under 25.
     >

    # Must be in the same order as FPS values. [default: [Over 40.], [Over 100.], [Over 120.]]
    S:warningsAtUpperFPSValues <
        Over 40.
        Over 100.
        Over 120.
     >
}


general {
    # Commands will not run if chunk updates are greater than or equal to this value. [range: 0 ~ 2147483647, default: 15]
    I:chunkUpdates=15

    # Cooldown between running of commands/warnings. [range: 0 ~ 2147483647, default: 240]
    I:cooldownTicks=240

    # Whether or not Swift is enabled. Note that profile commands will still work regardless of this setting.
    B:enableSwift=true

    # The frequency with which the check runs. [range: 0 ~ 2147483647, default: 120]
    I:ticksBetweenRun=120

    # Commands will not run if the player has been in the world for less than this value, given in ticks. [range: 0 ~ 2147483647, default: 400]
    I:ticksExisted=400
}


idlemode {
    # Should Swift check if the game is minimised or inactive and limit framerate?
    B:enableIdleMode=true

    # The framerate cap when the game window is in a minimised or inactive state. The lower the value, the better the efficiency gain but the longer to ramp up to the normal framerate again.
    I:idleModeFramerate=8
}


targetmode {
    # Due to the nature of a sandbox game like Minecraft, it's impossible to maintain a consistent framerate without excessively reducing graphics settings and then capping the framerate. To workaround this, Swift uses a target variance percentage, where Swift will ignore changes in framerate +-X%, where X is the value of the acceptableTargetVariance. Raise this number if you find that Swift is switching back and forth between settings too often. Lower this number if you want Swift to be more aggressive with adjusting settings. Only applicable if targetMode is enabled.
    I:acceptableTargetVariance=25

    # Automatically increase the acceptableTargetVariance by 5% *for the session* every time Swift detects that it's switching back and forth between settings too often (3 times in a row). Only applicable if targetMode is enabled.
    B:autoTargetVariance=true

    # When target mode is enabled, Swift works based on a target framerate algorithm. When disabled, Swift uses an upper and lower bounds triggering (boundry mode) algorithm.
    B:enableTargetMode=true

    # What's the maximum render distance (in chunks) that Swift can switch to if necessary? Must be higher than minChunks.
    I:maxChunks=32

    # What's the minimum render distance (in chunks) that Swift can switch to if necessary? Must be lower than maxChunks.
    I:minChunks=2

    # The framerate Swift will attempt to make your game run at, give or take a bit. Only applicable if targetMode is enabled. If set to 0, the target framerate will be your monitor's refresh rate.
    I:targetFramerate=0

    # Given the option, would you rather have better performance at the cost of visuals, or would you prefer better visuals at the cost of some performance? Choose a number on the scale of 1 to 5 inclusive, where 1 is best performance, 5 is best visuals and 3 is balanced. This individually adjusts the acceptableTargetVariance value for the above and below target triggers. E.g.: targetModePreference set to 5 will make above target triggers more sensitive and make the below target triggers less sensitive, thereby prefering visuals over performance. E.g.: targetModePreference set to 3 will make the target triggers for above and below be roughly the same. Only applicable if targetMode is enabled.
    I:targetModePreference=3
}


